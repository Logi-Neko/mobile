// lib/core/interceptor/auth_interceptor.dart

import 'package:dio/dio.dart';
import '../config/logger.dart';
import '../storage/token_storage.dart';
import '../common/ApiResponse.dart';
import '../navigation/navigation_service.dart';
import '../../features/auth/dto/login_response.dart';

class AuthInterceptor extends Interceptor {
  final TokenStorage _tokenStorage = TokenStorage.instance;

  // ƒê·ªÉ tr√°nh infinite loop khi refresh token
  bool _isRefreshing = false;
  final List<RequestOptions> _failedRequests = [];

  @override
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) async {
    try {
      // Skip th√™m token cho c√°c endpoint auth (login, register, refresh)
      final isAuthEndpoint = _isAuthEndpoint(options.path);

      if (!isAuthEndpoint) {
        // L·∫•y access token t·ª´ storage
        final accessToken = await _tokenStorage.getAccessToken();

        if (accessToken != null) {
          // Th√™m Authorization header
          options.headers['Authorization'] = 'Bearer $accessToken';
          logger.d('üîë Authorization header added: Bearer ${accessToken.substring(0, 10)}...');
        } else {
          logger.w('‚ö†Ô∏è No access token found for request: ${options.path}');
        }
      }

      // Th√™m Content-Type header n·∫øu ch∆∞a c√≥
      if (options.headers['Content-Type'] == null) {
        options.headers['Content-Type'] = 'application/json';
      }

      logger.d('üöÄ Request headers: ${options.headers}');
    } catch (e) {
      logger.e('‚ùå Error adding auth header: $e');
    }

    super.onRequest(options, handler);
  }

  @override
  void onError(DioException err, ErrorInterceptorHandler handler) async {
    // Ki·ªÉm tra n·∫øu l·ªói 401 v√† kh√¥ng ph·∫£i endpoint auth
    if (err.response?.statusCode == 401 && !_isAuthEndpoint(err.requestOptions.path)) {
      logger.w('üîÑ 401 Unauthorized - Attempting token refresh...');

      // N·∫øu ƒëang refresh th√¨ add request v√†o queue
      if (_isRefreshing) {
        _failedRequests.add(err.requestOptions);
        return;
      }

      _isRefreshing = true;

      try {
        // L·∫•y refresh token
        final refreshToken = await _tokenStorage.getRefreshToken();

        if (refreshToken == null) {
          logger.e('‚ùå No refresh token available');
          await _clearTokensAndRedirectToLogin();
          return super.onError(err, handler);
        }

        // G·ªçi API refresh token
        logger.i('üîÑ Refreshing token...');
        final newTokenResponse = await _refreshToken(refreshToken);

        if (newTokenResponse != null && newTokenResponse.data != null) {
          // L∆∞u tokens m·ªõi
          await _tokenStorage.saveTokenResponse(newTokenResponse.data!);
          logger.i('‚úÖ Token refreshed successfully');

          // Retry request ban ƒë·∫ßu v·ªõi token m·ªõi
          final newAccessToken = newTokenResponse.data!.accessToken;
          err.requestOptions.headers['Authorization'] = 'Bearer $newAccessToken';

          // T·∫°o Dio m·ªõi ƒë·ªÉ retry request
          final dio = Dio();
          dio.options = err.requestOptions as BaseOptions;
          final retryResponse = await dio.fetch(err.requestOptions);

          // Retry t·∫•t c·∫£ c√°c requests ƒëang ch·ªù
          await _retryFailedRequests(newAccessToken);

          return handler.resolve(retryResponse);

        } else {
          logger.e('‚ùå Refresh token response is null');
          await _clearTokensAndRedirectToLogin();
          return super.onError(err, handler);
        }

      } catch (refreshError) {
        logger.e('‚ùå Refresh token failed: $refreshError');
        await _clearTokensAndRedirectToLogin();
        return super.onError(err, handler);

      } finally {
        _isRefreshing = false;
        _failedRequests.clear();
      }
    }

    super.onError(err, handler);
  }

  /// Ki·ªÉm tra xem c√≥ ph·∫£i endpoint auth kh√¥ng
  bool _isAuthEndpoint(String path) {
    final authPaths = [
      '/login',
      '/register',
      '/refresh',
      '/forgot-password',
      '/reset-password'
    ];

    return authPaths.any((authPath) => path.contains(authPath));
  }

  /// G·ªçi API refresh token
  Future<ApiResponse<TokenResponse>?> _refreshToken(String refreshToken) async {
    try {
      final dio = Dio();
      dio.options.baseUrl = 'http://10.0.2.2:8081/api';

      final response = await dio.post(
        '/refresh',
        data: {'refreshToken': refreshToken},
      );

      if (response.statusCode == 200) {
        return ApiResponse.fromJson(
          response.data,
          (json) => TokenResponse.fromJson(json as Map<String, dynamic>),
        );
      }

      return null;
    } catch (e) {
      logger.e('‚ùå Error calling refresh token API: $e');
      return null;
    }
  }

  /// Retry t·∫•t c·∫£ c√°c requests ƒë√£ fail v·ªõi token m·ªõi
  Future<void> _retryFailedRequests(String newAccessToken) async {
    final dio = Dio();

    for (final request in _failedRequests) {
      try {
        request.headers['Authorization'] = 'Bearer $newAccessToken';
        await dio.fetch(request);
        logger.d('‚úÖ Retried failed request: ${request.path}');
      } catch (e) {
        logger.e('‚ùå Failed to retry request ${request.path}: $e');
      }
    }
  }

  /// X√≥a tokens v√† chuy·ªÉn h∆∞·ªõng v·ªÅ login
  Future<void> _clearTokensAndRedirectToLogin() async {
    try {
      // X√≥a t·∫•t c·∫£ tokens trong storage
      await _tokenStorage.clearAll();
      logger.i('üóëÔ∏è All tokens cleared due to refresh failure');

      // Hi·ªÉn th·ªã dialog th√¥ng b√°o phi√™n h·∫øt h·∫°n v√† chuy·ªÉn v·ªÅ login
      await NavigationService.instance.showTokenExpiredDialog();

    } catch (e) {
      logger.e('‚ùå Error clearing tokens: $e');
      // Fallback: chuy·ªÉn th·∫≥ng v·ªÅ login n·∫øu c√≥ l·ªói
      NavigationService.instance.navigateToLogin();
    }
  }

  /// C·∫≠p nh·∫≠t token trong header (d√πng khi refresh token th√†nh c√¥ng)
  void updateToken(String newAccessToken) {
    logger.d('üîÑ Token updated in auth interceptor');
  }

  /// X√≥a token kh·ªèi header (d√πng khi logout)
  void clearToken() {
    logger.d('üóëÔ∏è Token cleared from auth interceptor');
  }
}
