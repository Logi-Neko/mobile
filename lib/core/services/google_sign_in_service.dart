// lib/core/services/google_sign_in_service.dart

import 'package:google_sign_in/google_sign_in.dart';
import '../config/logger.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

class GoogleSignInService {
  static final GoogleSignInService _instance = GoogleSignInService._internal();
  factory GoogleSignInService() => _instance;
  GoogleSignInService._internal();

  static GoogleSignInService get instance => _instance;

  GoogleSignIn? _googleSignIn;

  /// Kh·ªüi t·∫°o Google Sign-In v·ªõi c·∫•u h√¨nh t·ª´ .env
  void initialize() {
    try {
      final String? clientId = dotenv.env['GOOGLE_CLIENT_ID'];

      if (clientId == null || clientId.isEmpty) {
        logger.e('‚ùå GOOGLE_CLIENT_ID not found in .env file');
        throw Exception('GOOGLE_CLIENT_ID is required for Google Sign-In');
      }

      _googleSignIn = GoogleSignIn(
        scopes: [
          'email',
          'profile',
          'openid', // Required for ID token
        ],
        // serverClientId ƒë·ªÉ l·∫•y ID token
        serverClientId: clientId,
      );

      logger.i('‚úÖ Google Sign-In initialized with client ID: ${_maskClientId(clientId)}');
    } catch (e) {
      logger.e('‚ùå Failed to initialize Google Sign-In: $e');
      rethrow;
    }
  }

  /// Th·ª±c hi·ªán ƒëƒÉng nh·∫≠p Google v√† tr·∫£ v·ªÅ ID token
  Future<String?> signInWithGoogle() async {
    if (_googleSignIn == null) {
      logger.e('‚ùå Google Sign-In not initialized. Call initialize() first.');
      throw Exception('Google Sign-In service not initialized');
    }

    try {
      logger.i('üîÑ Starting Google Sign-In flow...');

      // B∆∞·ªõc 1: ƒêƒÉng nh·∫≠p v√† l·∫•y th√¥ng tin user
      final GoogleSignInAccount? account = await _googleSignIn!.signIn();

      if (account == null) {
        logger.w('‚ö†Ô∏è User cancelled Google Sign-In');
        return null;
      }

      logger.i('‚úÖ User signed in: ${account.email}');

      // B∆∞·ªõc 2: L·∫•y authentication tokens
      final GoogleSignInAuthentication auth = await account.authentication;

      // B∆∞·ªõc 3: Tr·∫£ v·ªÅ ID token
      if (auth.idToken != null && auth.idToken!.isNotEmpty) {
        logger.i('üîê ID token retrieved successfully');
        logger.i('üìù ID token: ${auth.idToken!.substring(0, 20)}...');
        return auth.idToken;
      } else {
        logger.e('‚ùå No ID token received from Google');
        throw Exception('Failed to retrieve ID token from Google');
      }

    } catch (error) {
      logger.e('‚ùå Google Sign-In failed: $error');

      // X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn v·ªõi h∆∞·ªõng d·∫´n c·ª• th·ªÉ
      if (error.toString().contains('ApiException: 10')) {
        logger.e('üîß Configuration Error: Please ensure:');
        logger.e('   ‚Ä¢ OAuth 2.0 Client ID is created in Google Cloud Console');
        logger.e('   ‚Ä¢ Package name: com.example.logi_neko');
        logger.e('   ‚Ä¢ SHA-1 fingerprint is registered');
        logger.e('   ‚Ä¢ Google Sign-In API is enabled in your project');

        // N√©m exception v·ªõi th√¥ng b√°o r√µ r√†ng cho user
        throw Exception(
          'Google Sign-In ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng li√™n h·ªá nh√† ph√°t tri·ªÉn ƒë·ªÉ ho√†n t·∫•t thi·∫øt l·∫≠p OAuth 2.0 Client ID.'
        );
      } else if (error.toString().contains('network_error') ||
                 error.toString().contains('NETWORK_ERROR')) {
        throw Exception('L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra internet v√† th·ª≠ l·∫°i.');
      } else if (error.toString().contains('sign_in_canceled')) {
        // ƒê√¢y kh√¥ng ph·∫£i l·ªói, user ƒë√£ h·ªßy
        return null;
      }

      // N√©m l·∫°i l·ªói g·ªëc n·∫øu kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c
      throw Exception('ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i: ${error.toString()}');
    }
  }

  /// ƒêƒÉng xu·∫•t kh·ªèi Google
  Future<void> signOut() async {
    if (_googleSignIn == null) {
      logger.w('‚ö†Ô∏è Google Sign-In not initialized');
      return;
    }

    try {
      await _googleSignIn!.signOut();
      logger.i('‚úÖ Successfully signed out from Google');
    } catch (error) {
      logger.e('‚ùå Error signing out: $error');
      rethrow;
    }
  }

  /// Ng·∫Øt k·∫øt n·ªëi ho√†n to√†n kh·ªèi Google
  Future<void> disconnect() async {
    if (_googleSignIn == null) {
      logger.w('‚ö†Ô∏è Google Sign-In not initialized');
      return;
    }

    try {
      await _googleSignIn!.disconnect();
      logger.i('‚úÖ Successfully disconnected from Google');
    } catch (error) {
      logger.e('‚ùå Error disconnecting: $error');
      rethrow;
    }
  }

  /// Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
  Future<bool> isSignedIn() async {
    if (_googleSignIn == null) return false;
    return await _googleSignIn!.isSignedIn();
  }

  /// L·∫•y th√¥ng tin user hi·ªán t·∫°i
  GoogleSignInAccount? get currentUser => _googleSignIn?.currentUser;

  /// Che gi·∫•u m·ªôt ph·∫ßn client ID ƒë·ªÉ b·∫£o m·∫≠t log
  String _maskClientId(String clientId) {
    if (clientId.length <= 20) return '${clientId.substring(0, 8)}***';
    return '${clientId.substring(0, 12)}***${clientId.substring(clientId.length - 8)}';
  }

  /// Ki·ªÉm tra xem service ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
  bool get isInitialized => _googleSignIn != null;
}
